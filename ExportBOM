Option Explicit

Sub main()

    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swTable As SldWorks.TableAnnotation
    
    Dim colBOM As Collection

    Set swApp = Application.SldWorks
    Set swModel = swApp.ActiveDoc()

    Set swTable = GetTable(swModel)
    Call UpdateExcel(swModel, swTable)

End Sub
Function FindFeature(swModel As SldWorks.ModelDoc2, strFeatureName As String) As Collection
    
    Dim swFeature As SldWorks.Feature
    Dim colFoundFeature As New Collection

    Set swFeature = swModel.FirstFeature
    Do While Not swFeature Is Nothing
        'Debug.Print (swFeature.Name & " : " & swFeature.GetTypeName2)
        If swFeature.GetTypeName2 = strFeatureName Then
            Call colFoundFeature.Add(swFeature)
        End If
        Set swFeature = swFeature.GetNextFeature
    Loop
    
    Set FindFeature = colFoundFeature
    
End Function

Function FindBOMFeature(swModel As SldWorks.ModelDoc2) As SldWorks.BomFeature

    Dim swFeature As SldWorks.Feature
    Dim swSubFeature As SldWorks.Feature
    
    Dim colTableList As Collection
    Dim colFoundBOM As New Collection
    
    Set FindBOMFeature = Nothing
    
    Set colTableList = FindFeature(swModel, "TableFolder")
    If Not IsEmpty(colTableList) Then
        Set swFeature = colTableList(1)
        Set swSubFeature = swFeature.GetFirstSubFeature()
        Do While Not swSubFeature Is Nothing
            'Debug.Print (swSubFeature.Name & " : " & swSubFeature.GetTypeName2)
            If swSubFeature.GetTypeName2 = "BomFeat" Then
                Set FindBOMFeature = swSubFeature.GetSpecificFeature2()
                Exit Do
            End If
            Set swSubFeature = swSubFeature.GetNextSubFeature()
        Loop
    End If

End Function
    

Function GetTable(swModel As SldWorks.ModelDoc2) As SldWorks.TableAnnotation

    Dim swBOMFeature As SldWorks.BomFeature
    Dim swModelExtension As SldWorks.ModelDocExtension
    Dim swBOMTableAnnotation As SldWorks.BomTableAnnotation
    
    Dim strTemplate As String
    Dim varTableAnnotations As Variant
    
    Set swBOMFeature = FindBOMFeature(swModel)
    If swBOMFeature Is Nothing Then
        Set swModelExtension = swModel.Extension()

        strTemplate = "Z:\Libraries & Templates\Standard Parts Library\BOM-Odoo.sldbomtbt"
        Set swBOMTableAnnotation = swModelExtension.InsertBomTable3(strTemplate, 0, 0, SwConst.swBomType_e.swBomType_PartsOnly, "Default", True, 0, False)
        Set GetTable = swBOMTableAnnotation
        
        Call MsgBox("BOM Table was added.", vbOKOnly, "Done")
    Else
        varTableAnnotations = swBOMFeature.GetTableAnnotations
        Set GetTable = varTableAnnotations(0)
    End If
    
       
End Function

Function GetExportFilePath(swModel As SldWorks.ModelDoc2) As String

    'scripting.runtime
    Dim fsoFSO As New FileSystemObject
    
    Dim strFolderPath As String
    Dim strFilePath As String
    Dim strSourceFilePath As String
    
    strFolderPath = fsoFSO.GetParentFolderName(swModel.GetPathName)
    strFilePath = fsoFSO.BuildPath(strFolderPath, "\BOM.xlsx")
    
    strSourceFilePath = "C:\Users\farzad\Desktop\Macros\BOM.xlsx"
    If Not fsoFSO.FileExists(strFilePath) Then
        Call fsoFSO.CopyFile(strSourceFilePath, strFilePath, False)
    End If

    GetExportFilePath = strFilePath
    
    Set fsoFSO = Nothing

End Function


Sub UpdateExcel(swModel As SldWorks.ModelDoc2, swTable As SldWorks.TableAnnotation)

    Dim xlApp As Excel.Application
    Dim xlWorkbook As Excel.Workbook
    Dim xlWorksheet As Excel.Worksheet
    Dim xlCell As Excel.Range

    Dim strFilePath As String
    Dim intRow As Integer
    Dim intColumn As Integer
    
    strFilePath = GetExportFilePath(swModel)

    Set xlApp = CreateObject("Excel.Application")
    xlApp.DisplayAlerts = False
    
    Set xlWorkbook = xlApp.Workbooks.Open(strFilePath)
    Set xlWorksheet = xlWorkbook.Worksheets("BOM")

    Call xlApp.Wait(Now + TimeValue("0:00:05"))
    
    For intRow = 1 To swTable.RowCount - 1
    
        xlWorksheet.Cells(intRow + 1, 1) = swTable.Text(intRow, 0)
        xlWorksheet.Cells(intRow + 1, 2) = swTable.Text(intRow, 1)
        xlWorksheet.Cells(intRow + 1, 3) = swTable.Text(intRow, 2)
        xlWorksheet.Cells(intRow + 1, 4) = swTable.Text(intRow, 3)
        xlWorksheet.Cells(intRow + 1, 5) = swTable.Text(intRow, 4)
        xlWorksheet.Cells(intRow + 1, 6) = swTable.Text(intRow, 6)
        xlWorksheet.Cells(intRow + 1, 7) = swTable.Text(intRow, 7)
        xlWorksheet.Cells(intRow + 1, 8) = swTable.Text(intRow, 9)
        
    Next
    
    Call xlWorkbook.Save
    Call xlWorkbook.Close
    
    Call MsgBox("Export was successful", vbOKOnly, "Done")

    Set xlWorkbook = Nothing
    Set xlWorksheet = Nothing
    Set xlCell = Nothing
    Set xlApp = Nothing

End Sub


