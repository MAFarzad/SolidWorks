Option Explicit

Dim swApp As SldWorks.SldWorks
Dim swModel As SldWorks.ModelDoc2
Dim swPart As SldWorks.PartDoc

Dim xlApp As Excel.Application


Function Export(strDirectory As String, strName As String) As Boolean
 
Dim strDWGFile As String
Dim dblAlignment(11) As Double

strDWGFile = strDirectory & "\" & strName & ".dwg"

dblAlignment(0) = 0
dblAlignment(1) = 0
dblAlignment(2) = 0
dblAlignment(3) = 1
dblAlignment(4) = 0
dblAlignment(5) = 0
dblAlignment(6) = 0
dblAlignment(7) = 1
dblAlignment(8) = 0
dblAlignment(9) = 0
dblAlignment(10) = 0
dblAlignment(11) = 1

Call swApp.RunCommand(SwCommands.swCommands_NormalTo, "")
Export = swPart.ExportToDWG2(strDWGFile, swModel.GetPathName, SwConst.swExportToDWG_e.swExportToDWG_ExportSelectedFacesOrLoops, True, dblAlignment, False, False, 0, Null)


End Function

Function GetExportFolder() As String

Dim strDirectory As String
Dim strDirectoryArray() As String
Dim strProject As String
Dim strExportFolder As String


strDirectory = swApp.GetCurrentWorkingDirectory()
strDirectoryArray = Split(strDirectory, "\")
strProject = Left(strDirectoryArray(2), 9)

strExportFolder = GetSetting("Solidworks Macros", "ExportToDWG", strProject)
If strExportFolder = "" Then
    strExportFolder = strDirectoryArray(0) & "\" & strDirectoryArray(1) & "\" & strDirectoryArray(2) & "\" & strDirectoryArray(3) & "\" & strDirectoryArray(4) & "\CBR Laser"
    
    If Dir(strExportFolder, vbDirectory) = "" Then
        Call MkDir(strExportFolder)
    End If
    
    Call SaveSetting("Solidworks Macros", "ExportToDWG", strProject, strExportFolder)
End If

GetExportFolder = strExportFolder

End Function

Sub main()

Dim swModelExtension As SldWorks.ModelDocExtension
Dim swSelectionManager As SldWorks.SelectionMgr

Dim strDirectory As String
Dim strName As String
Dim bolExport As Boolean
Dim strExcelFile As String
Dim strMaterial As String
Dim dblThickness As Double

Set swApp = Application.SldWorks
Set swModel = swApp.ActiveDoc()
Set swModelExtension = swModel.Extension()
Set swPart = swModel
Set swSelectionManager = swModel.SelectionManager()

If swSelectionManager.GetSelectedObjectCount2(0) = 1 And swSelectionManager.GetSelectedObjectType3(1, 0) = SwConst.swSelectType_e.swSelFACES Then
    If swModel.LengthUnit = SwConst.swLengthUnit_e.swINCHES Then
         
        strDirectory = GetExportFolder()
        strName = GetName()
        
        bolExport = Export(strDirectory, strName)
        If bolExport Then
            strExcelFile = CheckExcelFileExist(strDirectory)
            
            strMaterial = GetMaterial()
            dblThickness = FindThickness()
            
            Call UpdateExcel(strExcelFile, strName, strMaterial, dblThickness)
            
            Call MsgBox("Export was successful", vbOKOnly, "Done")
        End If
    Else
        Call MsgBox("Change units to inch and try again.", vbOKOnly, "Error")
    End If
Else
    Call MsgBox("Select only one face and try again.", vbOKOnly, "Error")
End If

End Sub

Function GetName() As String

Dim strNameComplete As String
Dim strNameCompleteArray() As String


strNameComplete = swModel.GetTitle()
strNameCompleteArray = Split(strNameComplete, ".")
GetName = InputBox("Name?", , strNameCompleteArray(0))
        
End Function
Function GetMaterial() As String

Dim strMaterialDetails As String
Dim strMaterialDetailsArray() As String

strMaterialDetails = swPart.MaterialIdName()
strMaterialDetailsArray = Split(strMaterialDetails, "|")
GetMaterial = strMaterialDetailsArray(1)
        
End Function


Function CheckExcelFileExist(strDirectory As String) As String

Dim strFileName As String
Dim strSourceFile As String

strFileName = strDirectory & "\Part List.xlsx"
strSourceFile = "C:\Users\farzad\Desktop\Macros\Part List.xlsx"

If Dir(strFileName) = "" Then
    Call FileCopy(strSourceFile, strFileName)
End If

CheckExcelFileExist = strFileName

End Function




Function FindThickness() As Double

Dim swFeature As SldWorks.Feature
Dim swExtrude As SldWorks.ExtrudeFeatureData2
Dim swSheetMetal As SldWorks.SheetMetalFeatureData

Dim strType As String

Set swFeature = swPart.FirstFeature

Do While Not swFeature Is Nothing
    Debug.Print (swFeature.Name & " : " & swFeature.GetTypeName2)
    
    strType = swFeature.GetTypeName2
     
    If swFeature.GetTypeName2 = "Extrusion" Or swFeature.GetTypeName2 = "ExtruThin" Then
        Set swExtrude = swFeature.GetDefinition()
        FindThickness = (swExtrude.GetDepth(True) + swExtrude.GetDepth(False)) / 0.0254
        
        Set swFeature = Nothing
        Set swExtrude = Nothing
        
        Exit Function
    ElseIf swFeature.GetTypeName2 = "SheetMetal" Then
        Set swSheetMetal = swFeature.GetDefinition()
        FindThickness = swSheetMetal.Thickness() / 0.0254
        
        Set swFeature = Nothing
        Set swSheetMetal = Nothing
        
        Exit Function
    End If
    
    Set swFeature = swFeature.GetNextFeature
Loop

Set swFeature = Nothing

FindThickness = 0

End Function
Sub UpdateExcel(strFilePath As String, strName As String, strMaterial As String, dblThickness As Double)

Dim xlWorkbook As Excel.Workbook
Dim xlWorksheet As Excel.Worksheet
Dim xlCell As Excel.Range

Dim lngRow As Long

Set xlApp = CreateObject("Excel.Application")

Set xlWorkbook = xlApp.Workbooks.Open(strFilePath)
Set xlWorksheet = xlWorkbook.Worksheets("Sheet1")

Call xlApp.Wait(Now + TimeValue("0:00:02"))

For Each xlCell In xlWorksheet.Columns(1).Cells
    If IsEmpty(xlCell) Then
        lngRow = xlCell.Row
        Exit For
    End If
Next

xlWorksheet.Cells(lngRow, 1) = lngRow - 1
xlWorksheet.Cells(lngRow, 2) = strName
xlWorksheet.Cells(lngRow, 3) = InputBox("How many?", strName, 1)
xlWorksheet.Cells(lngRow, 4) = strMaterial
xlWorksheet.Cells(lngRow, 5) = Format(dblThickness, "#0.0000") & Chr(34)
xlWorksheet.Cells(lngRow, 6) = InputBox("Procedure?", strName, "Laser")
xlWorksheet.Cells(lngRow, 7) = InputBox("Bend?", strName, "")
xlWorksheet.Cells(lngRow, 8) = InputBox("Our material?", strName, "")
xlWorksheet.Cells(lngRow, 9) = InputBox("Description?", strName, "Painted-Ali")

Call xlWorkbook.Save
Call xlWorkbook.Close

Set xlWorkbook = Nothing
Set xlWorksheet = Nothing
Set xlCell = Nothing
Set xlApp = Nothing

End Sub
