Option Explicit

Function Export(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swPart As SldWorks.PartDoc, strDWGPath As String) As Boolean

    Dim dblAlignment(11) As Double

    dblAlignment(0) = 0
    dblAlignment(1) = 0
    dblAlignment(2) = 0
    dblAlignment(3) = 1
    dblAlignment(4) = 0
    dblAlignment(5) = 0
    dblAlignment(6) = 0
    dblAlignment(7) = 1
    dblAlignment(8) = 0
    dblAlignment(9) = 0
    dblAlignment(10) = 0
    dblAlignment(11) = 1
    
    Call swApp.RunCommand(SwCommands.swCommands_NormalTo, "")
    Export = swPart.ExportToDWG2(strDWGPath, swModel.GetPathName, SwConst.swExportToDWG_e.swExportToDWG_ExportSelectedFacesOrLoops, True, dblAlignment, False, False, 0, Null)
    
End Function



Function GetExportFileData(swModel As SldWorks.ModelDoc2) As Collection

    'scripting.runtime
    Dim fsoFSO As New FileSystemObject
    Dim colData As New Collection
    
    Dim strModelPath As String
    Dim strModelName As String
    Dim strProjectName As String
    Dim strExportFolderPath As String
    Dim strDWGPath As String
    Dim strExcelPath As String
    Dim strSourceExcelPath As String
    
    strModelPath = swModel.GetPathName()
    
    strModelName = fsoFSO.GetBaseName(strModelPath)
    strModelName = InputBox("File Name?", "Project", strModelName)
    If strModelName = "" Then
        Set GetExportFileData = Nothing
        Exit Function
    End If
    colData.Add (strModelName)
    
    strProjectName = Left(strModelName, 9)
    strProjectName = InputBox("Project Name?", "Project", strProjectName)
    If strProjectName = "" Then
        Set GetExportFileData = Nothing
        Exit Function
    End If
    
    
    strExportFolderPath = GetSetting("Solidworks Macros", "ExportToDWG", strProjectName)
    If strExportFolderPath = "" Then
        strExportFolderPath = fsoFSO.BuildPath(fsoFSO.GetParentFolderName(strModelPath), "CBR Laser")
        strExportFolderPath = InputBox("Export Folder?", "Project", strExportFolderPath)
        If strExportFolderPath = "" Then
            Set GetExportFileData = Nothing
            Exit Function
        End If
        
        Call SaveSetting("Solidworks Macros", "ExportToDWG", strProjectName, strExportFolderPath)
    End If
    colData.Add (strExportFolderPath)
    
    If Not fsoFSO.FolderExists(strExportFolderPath) Then
        Call fsoFSO.CreateFolder(strExportFolderPath)
    End If
    
    strDWGPath = fsoFSO.BuildPath(strExportFolderPath, strModelName & ".dwg")
    colData.Add (strDWGPath)
    
    strExcelPath = fsoFSO.BuildPath(strExportFolderPath, "CBR List.xlsx")
    strSourceExcelPath = "C:\Users\farzad\Desktop\Macros\CBR List.xlsx"
    If Not fsoFSO.FileExists(strExcelPath) Then
        Call fsoFSO.CopyFile(strSourceExcelPath, strExcelPath, False)
    End If
    colData.Add (strExcelPath)
    
    Set GetExportFileData = colData
    
    Set fsoFSO = Nothing
    Set colData = Nothing
    
End Function
'
Sub main()
    
    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swPart As SldWorks.PartDoc
    Dim swSelectionManager As SldWorks.SelectionMgr
    
    Dim colExportFileData As Collection
    Dim colPartData As Collection
    
    Dim strDWGPath As String
    Dim bolExport As Boolean
    
    Set swApp = Application.SldWorks
    Set swModel = swApp.ActiveDoc()
    Set swPart = swModel
    Set swSelectionManager = swModel.SelectionManager()
        
    If swSelectionManager.GetSelectedObjectCount2(0) = 1 And swSelectionManager.GetSelectedObjectType3(1, 0) = SwConst.swSelectType_e.swSelFACES Then
        
        If swModel.LengthUnit = SwConst.swLengthUnit_e.swINCHES Then
            Set colExportFileData = GetExportFileData(swModel)
            
            If Not colExportFileData Is Nothing Then
                strDWGPath = colExportFileData(3)
                bolExport = Export(swApp, swModel, swPart, strDWGPath)
                
                If bolExport Then
                    Set colPartData = GetPartData(swPart)
                    
                    If Not colPartData Is Nothing Then
                        Call UpdateExcel(colExportFileData, colPartData)
                    Else
                        Call MsgBox("Terminated by user.", vbOKOnly + vbExclamation, "End")
                    End If

                Else
                    Call MsgBox("Export was failed", vbOKOnly + vbCritical, "Fail")
                End If
                
            Else
                Call MsgBox("Terminated by user.", vbOKOnly + vbExclamation, "End")
            End If
            
        Else
            Call MsgBox("Change units to inch and try again.", vbOKOnly, "Error")
        End If
    Else
        Call MsgBox("Select only one face and try again.", vbOKOnly, "Error")
    End If

End Sub

Function GetMaterial(swPart As SldWorks.PartDoc) As String

    Dim strMaterialDetails As String
    Dim strMaterialDetailsArray() As String

    strMaterialDetails = swPart.MaterialIdName()
    strMaterialDetailsArray = Split(strMaterialDetails, "|")
    GetMaterial = strMaterialDetailsArray(1)

End Function


Function GetPartData(swPart As SldWorks.PartDoc) As Collection
    
    Dim colData As New Collection
    
    Dim strQuantity As String
    Dim strMaterial As String
    Dim StrThickness As String
    Dim strCut As String
    Dim intBend As Integer
    Dim intMaterialProvided As Integer
    Dim intPaint As Integer
    Dim strDescription As String
    
    strQuantity = InputBox("Quantity?", "Quantity", "1")
    If strQuantity = "" Then
        Set GetPartData = Nothing
        Exit Function
    End If
    colData.Add (strQuantity)
    
    strMaterial = GetMaterial(swPart)
    If strMaterial = "" Then
        Set GetPartData = Nothing
        Exit Function
    End If
    colData.Add (strMaterial)
    
    StrThickness = GetThickness(swPart)
    If StrThickness = "" Then
        Set GetPartData = Nothing
        Exit Function
    End If
    colData.Add (Format(StrThickness, "#0.0000") & Chr(34))
    
    strCut = InputBox("Cut type?", "Cut", "Laser")
    If strCut = "" Then
        Set GetPartData = Nothing
        Exit Function
    End If
    colData.Add (strCut)
    
    intBend = MsgBox("Should be bent?", vbYesNoCancel, "Bend")
    If intBend = vbCancel Then
        Set GetPartData = Nothing
        Exit Function
    ElseIf intBend = vbYes Then
        colData.Add ("X")
    Else
        colData.Add ("")
    End If
    
    intMaterialProvided = MsgBox("Do we provide the material?", vbYesNoCancel, "Material Provided")
    If intMaterialProvided = vbCancel Then
        Set GetPartData = Nothing
        Exit Function
    ElseIf intMaterialProvided = vbYes Then
        colData.Add ("X")
    Else
        colData.Add ("")
    End If
    
    intPaint = MsgBox("Should be painted?", vbYesNoCancel, "Paint")
    If intPaint = vbCancel Then
        Set GetPartData = Nothing
        Exit Function
    ElseIf intPaint = vbYes Then
        colData.Add ("X")
    Else
        colData.Add ("")
    End If

    Set GetPartData = colData
        
End Function

Function GetThickness(swPart As SldWorks.PartDoc) As String

    Dim swFeature As SldWorks.Feature
    Dim swExtrude As SldWorks.ExtrudeFeatureData2
    Dim swSheetMetal As SldWorks.SheetMetalFeatureData
    
    Dim strFeatureType As String
    Dim dblThickness As Double

    Set swFeature = swPart.FirstFeature
    Do While Not swFeature Is Nothing
        'Debug.Print (swFeature.Name & " : " & swFeature.GetTypeName2)

        strFeatureType = swFeature.GetTypeName2
        If strFeatureType = "Extrusion" Or strFeatureType = "ExtruThin" Then
            Set swExtrude = swFeature.GetDefinition()
            dblThickness = (swExtrude.GetDepth(True) + swExtrude.GetDepth(False))
            Exit Do
        ElseIf strFeatureType = "SheetMetal" Then
            Set swSheetMetal = swFeature.GetDefinition()
            dblThickness = swSheetMetal.Thickness()
            Exit Do
        End If

        Set swFeature = swFeature.GetNextFeature
    Loop
    
    dblThickness = dblThickness / 0.0254
    
    GetThickness = InputBox("Check Thickness", "Thickness", dblThickness)

End Function

Function GetEmptyRow(xlWorksheet As Excel.Worksheet, intColumnIndex As Integer) As Integer

    Dim xlCell As Excel.Range

    For Each xlCell In xlWorksheet.Columns(intColumnIndex).Cells
        If IsEmpty(xlCell) Then
            GetEmptyRow = xlCell.Row
            Exit For
        End If
    Next

End Function

Function GetDuplication(xlWorksheet As Excel.Worksheet, intColumnIndex As Integer, intLastRowIndex, strItem As String) As Integer
    
    Dim xlCells As Excel.Range
    Dim xlCell As Excel.Range
    
    Dim intRowIndex As Integer
    
    Set xlCells = xlWorksheet.Columns(intColumnIndex).Cells

    For intRowIndex = 2 To intLastRowIndex
        Set xlCell = xlWorksheet.Cells(intRowIndex, intColumnIndex)
        
        If xlCell = strItem Then
            GetDuplication = xlCell.Row
            Exit Function
        End If
        
    Next
    
    GetDuplication = 0

End Function

Function UpdateExcel(colExportFileData As Collection, colPartData As Collection)

    Dim xlApp As Excel.Application
    Dim xlWorkbook As Excel.Workbook
    Dim xlWorksheet As Excel.Worksheet
    Dim xlCell As Excel.Range
    
    Dim intEmptyRowIndex As Integer
    Dim intDuplicatedRowIndex As Integer
    Dim intCurrentRowIndex As Integer
    Dim intFreeSpot As Integer
    Dim strMaterialSpec As String
    Dim strThicknessSpec As String
    Dim strProcesSpec As String
    Dim strPaintSpec As String

    Set xlApp = CreateObject("Excel.Application")
    xlApp.DisplayAlerts = False

    Set xlWorkbook = xlApp.Workbooks.Open(colExportFileData(4))
    Call xlApp.Wait(Now + TimeValue("0:00:02"))
    
    Set xlWorksheet = xlWorkbook.Worksheets("BOM")
    
    intEmptyRowIndex = GetEmptyRow(xlWorksheet, 2)
    
    intDuplicatedRowIndex = GetDuplication(xlWorksheet, 2, intEmptyRowIndex - 1, colExportFileData(1))
    If intDuplicatedRowIndex = 0 Then
        intCurrentRowIndex = intEmptyRowIndex
    Else
        intCurrentRowIndex = intDuplicatedRowIndex
    End If
    
    intFreeSpot = Val(InputBox("First Odoo free spot?", "Odoo", "1"))
    
    strMaterialSpec = "Material: " & colPartData(2)
    If colPartData(6) = "X" Then
        strMaterialSpec = strMaterialSpec & " (Provided by the Client))"
    End If
    
    strThicknessSpec = "Thickness: " & colPartData(3)
    
    strProcesSpec = "Process: " & colPartData(4)
    If colPartData(5) = "X" Then
        strProcesSpec = strProcesSpec & " + Bend"
    End If

    strPaintSpec = ""
    If colPartData(7) = "X" Then
        strPaintSpec = strPaintSpec & "Paint"
    End If
    
    xlWorksheet.Cells(intCurrentRowIndex, 1) = "CBR-" & Format(intFreeSpot, "#0000")
    xlWorksheet.Cells(intCurrentRowIndex, 2) = colExportFileData(1)
    xlWorksheet.Cells(intCurrentRowIndex, 3) = colPartData(1)
    xlWorksheet.Cells(intCurrentRowIndex, 4) = colPartData(2)
    xlWorksheet.Cells(intCurrentRowIndex, 5) = colPartData(3)
    xlWorksheet.Cells(intCurrentRowIndex, 6) = colPartData(4)
    xlWorksheet.Cells(intCurrentRowIndex, 7) = colPartData(5)
    xlWorksheet.Cells(intCurrentRowIndex, 8) = colPartData(6)
    xlWorksheet.Cells(intCurrentRowIndex, 9) = colPartData(7)
    
    xlWorksheet.Cells(intCurrentRowIndex, 10) = strMaterialSpec & vbCrLf & strThicknessSpec & vbCrLf & strProcesSpec & vbCrLf & strPaintSpec & vbCrLf & vbCrLf & colExportFileData(3)
    xlWorksheet.Cells(intCurrentRowIndex, 11) = colExportFileData(1) & ", " & strMaterialSpec & ", " & strThicknessSpec & ", " & strProcesSpec
    
    xlWorksheet.Cells(intCurrentRowIndex, 12) = "https://www.cbrlaser.com/images/cbr-laser-logo.png"
    xlWorksheet.Cells(intCurrentRowIndex, 13) = "CBR Laser"
    xlWorksheet.Cells(intCurrentRowIndex, 14) = "CBR Laser"
    xlWorksheet.Cells(intCurrentRowIndex, 15) = "CBR"
    xlWorksheet.Cells(intCurrentRowIndex, 16) = 0
    xlWorksheet.Cells(intCurrentRowIndex, 17) = 1
    xlWorksheet.Cells(intCurrentRowIndex, 18) = "Storable Product"
    xlWorksheet.Cells(intCurrentRowIndex, 19) = "Mechanical Parts / CBR Laser"
    xlWorksheet.Cells(intCurrentRowIndex, 20) = 0
    xlWorksheet.Cells(intCurrentRowIndex, 21) = 0
    
        
    Call xlWorkbook.Save
    Call xlWorkbook.Close
    
    Call MsgBox("Excel was updated", vbOKOnly, "Done")
    
    Set xlCell = Nothing
    Set xlWorksheet = Nothing
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
    
End Function
